[gd_scene load_steps=5 format=2]

[ext_resource path="res://Assets/BaseTilemap.tres" type="TileSet" id=1]
[ext_resource path="res://Actors/Space.gd" type="Script" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float time;
uniform float comfort_amount;

vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) + 0.5;
}

void fragment() {
	const float amount = 300.;
	
	vec2 uv = round(SCREEN_UV * float(amount)) / float(amount);
	vec3 screen_color = vec3(0.0);
	const int BLUR_KERNEL = 1;
	vec2 displace = vec2(
		noise(vec2(sin(uv.x * 10.), 2. * sin(time * 0.2) * uv.x)),
		noise(vec2(cos(uv.y * 10.), 2. * cos(time * 0.3) * uv.y))
	);
	
	for(int x = -BLUR_KERNEL; x < BLUR_KERNEL; x++) {
		for(int y = -BLUR_KERNEL; y < BLUR_KERNEL; y++) {
			screen_color += texture(
				SCREEN_TEXTURE,
				uv + vec2(float(x), float(y)) * SCREEN_PIXEL_SIZE * 3. + displace * 0.0
			).rgb / float((BLUR_KERNEL * 2 + 1) * (BLUR_KERNEL * 2 + 1));
		}
	}
	
	COLOR.rgb = vec3(0.);
	COLOR.rgb += vec3(length(screen_color)) * 0.2;
	COLOR.r += (1. - length(screen_color)) * 0.2 * (1. - comfort_amount);
	COLOR.rgb += vec3(0.05, 0., 0.) * (1. - comfort_amount);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/time = null
shader_param/comfort_amount = null

[node name="SpaceMap" type="TileMap"]
material = SubResource( 2 )
tile_set = ExtResource( 1 )
cell_size = Vector2( 40, 40 )
collision_layer = 4
collision_mask = 0
format = 1
script = ExtResource( 2 )

[node name="SpaceTimer" type="Timer" parent="."]
wait_time = 0.1
autostart = true

[connection signal="timeout" from="SpaceTimer" to="." method="_on_SpaceTimer_timeout"]
